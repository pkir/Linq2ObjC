<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/LQEnumerable.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/LQEnumerable</TokenIdentifier>
			<Abstract type="html">Common interface for all collections that can be enumerated. It is a heart of the library.
This analog IEnumerable in .NET and represents LINQ to Objects part of .NET. In basics LINQ to Objects
is a different approach to work with collections. In the old way you had to write forin loops in order to retrive data.
In the LINQ you write declarative code that describes what you want to retrive from the collection.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>
			
			<NodeRef refid="9"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setSelect:</TokenIdentifier>
			<Abstract type="html">Projects each element of a sequence into a new form.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSelectBlock select</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract type="html">- A transform function to apply to each element.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">- an id&lt;LQEnumerable&gt; whose elements are the result of invoking the transform function on each element of source.</Abstract></ReturnValue>
			<Anchor>//api/name/select</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/select</TokenIdentifier>
			<Abstract type="html">Projects each element of a sequence into a new form.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSelectBlock select</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector</Name>
					<Abstract type="html">- A transform function to apply to each element.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">- an id&lt;LQEnumerable&gt; whose elements are the result of invoking the transform function on each element of source.</Abstract></ReturnValue>
			<Anchor>//api/name/select</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setWhere:</TokenIdentifier>
			<Abstract type="html">Filters a sequence of values based on a predicate.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQWhereBlock where</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an id&lt;LQEnumerable&gt; that contains elements from the input sequence that satisfy the condition.</Abstract></ReturnValue>
			<Anchor>//api/name/where</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/where</TokenIdentifier>
			<Abstract type="html">Filters a sequence of values based on a predicate.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQWhereBlock where</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">an id&lt;LQEnumerable&gt; that contains elements from the input sequence that satisfy the condition.</Abstract></ReturnValue>
			<Anchor>//api/name/where</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setSelectMany:</TokenIdentifier>
			<Abstract type="html">Projects each element of a sequence to an id&lt;LQEnumerable&gt; and flattens the resulting sequences into one sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSelectManyBlock selectMany</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector:</Name>
					<Abstract type="html">- A transform function to apply to each element.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/selectMany</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/selectMany</TokenIdentifier>
			<Abstract type="html">Projects each element of a sequence to an id&lt;LQEnumerable&gt; and flattens the resulting sequences into one sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSelectManyBlock selectMany</Declaration>
			<Parameters>
				<Parameter>
					<Name>selector:</Name>
					<Abstract type="html">- A transform function to apply to each element.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/selectMany</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setDistinct:</TokenIdentifier>
			<Abstract type="html">Returns distinct elements from a sequence by using isEqual method to compare items</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQDistinctBlock distinct</Declaration>
			
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains distinct elements from the source sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/distinct</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/distinct</TokenIdentifier>
			<Abstract type="html">Returns distinct elements from a sequence by using isEqual method to compare items</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQDistinctBlock distinct</Declaration>
			
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains distinct elements from the source sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/distinct</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setSkip:</TokenIdentifier>
			<Abstract type="html">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSkipBlock skip</Declaration>
			<Parameters>
				<Parameter>
					<Name>count</Name>
					<Abstract type="html">- The number of elements to skip before returning the remaining elements.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the elements that occur after the specified index in the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/skip</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/skip</TokenIdentifier>
			<Abstract type="html">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSkipBlock skip</Declaration>
			<Parameters>
				<Parameter>
					<Name>count</Name>
					<Abstract type="html">- The number of elements to skip before returning the remaining elements.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the elements that occur after the specified index in the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/skip</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setSkipWhile:</TokenIdentifier>
			<Abstract type="html">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSkipWithPredicateBlock skipWhile</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</Abstract></ReturnValue>
			<Anchor>//api/name/skipWhile</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/skipWhile</TokenIdentifier>
			<Abstract type="html">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSkipWithPredicateBlock skipWhile</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</Abstract></ReturnValue>
			<Anchor>//api/name/skipWhile</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setTake:</TokenIdentifier>
			<Abstract type="html">Returns a specified number of contiguous elements from the start of a sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSTakeBlock take</Declaration>
			<Parameters>
				<Parameter>
					<Name>count</Name>
					<Abstract type="html">- The number of elements to return.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the specified number of elements from the start of the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/take</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/take</TokenIdentifier>
			<Abstract type="html">Returns a specified number of contiguous elements from the start of a sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSTakeBlock take</Declaration>
			<Parameters>
				<Parameter>
					<Name>count</Name>
					<Abstract type="html">- The number of elements to return.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the specified number of elements from the start of the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/take</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setTakeWhile:</TokenIdentifier>
			<Abstract type="html">Returns elements from a sequence as long as a specified condition is true.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSTakeWithPredicateBlock takeWhile</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the elements from the input sequence that occur before the element at which the test no longer passes.</Abstract></ReturnValue>
			<Anchor>//api/name/takeWhile</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/takeWhile</TokenIdentifier>
			<Abstract type="html">Returns elements from a sequence as long as a specified condition is true.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSTakeWithPredicateBlock takeWhile</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the elements from the input sequence that occur before the element at which the test no longer passes.</Abstract></ReturnValue>
			<Anchor>//api/name/takeWhile</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setAll:</TokenIdentifier>
			<Abstract type="html">Determines whether all elements of a sequence satisfy a condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQAllBlock all</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, NO.</Abstract></ReturnValue>
			<Anchor>//api/name/all</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/all</TokenIdentifier>
			<Abstract type="html">Determines whether all elements of a sequence satisfy a condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQAllBlock all</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, NO.</Abstract></ReturnValue>
			<Anchor>//api/name/all</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setAny:</TokenIdentifier>
			<Abstract type="html">Determines whether any element of a sequence satisfies a condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQAnyBlock any</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if at least one element of the source sequence passes the test in the specified predicate; otherwise, NO.</Abstract></ReturnValue>
			<Anchor>//api/name/any</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/any</TokenIdentifier>
			<Abstract type="html">Determines whether any element of a sequence satisfies a condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQAnyBlock any</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if at least one element of the source sequence passes the test in the specified predicate; otherwise, NO.</Abstract></ReturnValue>
			<Anchor>//api/name/any</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setAggregate:</TokenIdentifier>
			<Abstract type="html">Applies an accumulator function over a sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQAggregate aggregate</Declaration>
			<Parameters>
				<Parameter>
					<Name>seed</Name>
					<Abstract type="html">- The initial accumulator value.</Abstract>
				</Parameter><Parameter>
					<Name>aggregator</Name>
					<Abstract type="html">- An accumulator function to be invoked on each element.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The final accumulator value.</Abstract></ReturnValue>
			<Anchor>//api/name/aggregate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/aggregate</TokenIdentifier>
			<Abstract type="html">Applies an accumulator function over a sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQAggregate aggregate</Declaration>
			<Parameters>
				<Parameter>
					<Name>seed</Name>
					<Abstract type="html">- The initial accumulator value.</Abstract>
				</Parameter><Parameter>
					<Name>aggregator</Name>
					<Abstract type="html">- An accumulator function to be invoked on each element.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The final accumulator value.</Abstract></ReturnValue>
			<Anchor>//api/name/aggregate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setAggregateWithSeed:</TokenIdentifier>
			<Abstract type="html">Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQAggregateWithSeed aggregateWithSeed</Declaration>
			<Parameters>
				<Parameter>
					<Name>aggregator</Name>
					<Abstract type="html">- An accumulator function to be invoked on each element.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The final accumulator value.</Abstract></ReturnValue>
			<Anchor>//api/name/aggregateWithSeed</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/aggregateWithSeed</TokenIdentifier>
			<Abstract type="html">Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQAggregateWithSeed aggregateWithSeed</Declaration>
			<Parameters>
				<Parameter>
					<Name>aggregator</Name>
					<Abstract type="html">- An accumulator function to be invoked on each element.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The final accumulator value.</Abstract></ReturnValue>
			<Anchor>//api/name/aggregateWithSeed</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setSingle:</TokenIdentifier>
			<Abstract type="html">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock single</Declaration>
			
			<ReturnValue><Abstract type="html">The single element of the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/single</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/single</TokenIdentifier>
			<Abstract type="html">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock single</Declaration>
			
			<ReturnValue><Abstract type="html">The single element of the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/single</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setSingleWithPredicate:</TokenIdentifier>
			<Abstract type="html">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock singleWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test an element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The single element of the input sequence that satisfies a condition.</Abstract></ReturnValue>
			<Anchor>//api/name/singleWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/singleWithPredicate</TokenIdentifier>
			<Abstract type="html">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock singleWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test an element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The single element of the input sequence that satisfies a condition.</Abstract></ReturnValue>
			<Anchor>//api/name/singleWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setSingleOrNil:</TokenIdentifier>
			<Abstract type="html">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock singleOrNil</Declaration>
			
			<ReturnValue><Abstract type="html">The single element of the input sequence, or nil if the sequence contains no elements.
@exeption InvalidOperationException The input sequence contains more than one element.</Abstract></ReturnValue>
			<Anchor>//api/name/singleOrNil</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/singleOrNil</TokenIdentifier>
			<Abstract type="html">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock singleOrNil</Declaration>
			
			<ReturnValue><Abstract type="html">The single element of the input sequence, or nil if the sequence contains no elements.
@exeption InvalidOperationException The input sequence contains more than one element.</Abstract></ReturnValue>
			<Anchor>//api/name/singleOrNil</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setSingleOrNilWithPredicate:</TokenIdentifier>
			<Abstract type="html">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock singleOrNilWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test an element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The single element of the input sequence that satisfies the condition, or nil if no such element is found.</Abstract></ReturnValue>
			<Anchor>//api/name/singleOrNilWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/singleOrNilWithPredicate</TokenIdentifier>
			<Abstract type="html">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock singleOrNilWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test an element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The single element of the input sequence that satisfies the condition, or nil if no such element is found.</Abstract></ReturnValue>
			<Anchor>//api/name/singleOrNilWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setFirst:</TokenIdentifier>
			<Abstract type="html">Returns the first element of a sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock first</Declaration>
			
			<ReturnValue><Abstract type="html">The first element in the specified sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/first</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/first</TokenIdentifier>
			<Abstract type="html">Returns the first element of a sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock first</Declaration>
			
			<ReturnValue><Abstract type="html">The first element in the specified sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/first</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setFirstWithPredicate:</TokenIdentifier>
			<Abstract type="html">Returns the first element in a sequence that satisfies a specified condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock firstWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.
The first element in the sequence that passes the test in the specified predicate function.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/firstWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/firstWithPredicate</TokenIdentifier>
			<Abstract type="html">Returns the first element in a sequence that satisfies a specified condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock firstWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.
The first element in the sequence that passes the test in the specified predicate function.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/firstWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setFirstOrNil:</TokenIdentifier>
			<Abstract type="html">Returns the first element of a sequence, or a default value if the sequence contains no elements.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock firstOrNil</Declaration>
			
			<ReturnValue><Abstract type="html">nil if source is empty; otherwise, the first element in source.</Abstract></ReturnValue>
			<Anchor>//api/name/firstOrNil</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/firstOrNil</TokenIdentifier>
			<Abstract type="html">Returns the first element of a sequence, or a default value if the sequence contains no elements.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock firstOrNil</Declaration>
			
			<ReturnValue><Abstract type="html">nil if source is empty; otherwise, the first element in source.</Abstract></ReturnValue>
			<Anchor>//api/name/firstOrNil</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setFirstOrNilWithPredicate:</TokenIdentifier>
			<Abstract type="html">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock firstOrNilWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">nil if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.</Abstract></ReturnValue>
			<Anchor>//api/name/firstOrNilWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/firstOrNilWithPredicate</TokenIdentifier>
			<Abstract type="html">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock firstOrNilWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">nil if source is empty or if no element passes the test specified by predicate; otherwise, the first element in source that passes the test specified by predicate.</Abstract></ReturnValue>
			<Anchor>//api/name/firstOrNilWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setLast:</TokenIdentifier>
			<Abstract type="html">Returns the last element of a sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock last</Declaration>
			
			<ReturnValue><Abstract type="html">The value at the last position in the source sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/last</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/last</TokenIdentifier>
			<Abstract type="html">Returns the last element of a sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock last</Declaration>
			
			<ReturnValue><Abstract type="html">The value at the last position in the source sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/last</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setLastWithPredicate:</TokenIdentifier>
			<Abstract type="html">Returns the last element of a sequence that satisfies a specified condition.
@params predicate - A function to test each element for a condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock lastWithPredicate</Declaration>
			
			<ReturnValue><Abstract type="html">The last element in the sequence that passes the test in the specified predicate function.</Abstract></ReturnValue>
			<Anchor>//api/name/lastWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/lastWithPredicate</TokenIdentifier>
			<Abstract type="html">Returns the last element of a sequence that satisfies a specified condition.
@params predicate - A function to test each element for a condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock lastWithPredicate</Declaration>
			
			<ReturnValue><Abstract type="html">The last element in the sequence that passes the test in the specified predicate function.</Abstract></ReturnValue>
			<Anchor>//api/name/lastWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setLastOrNil:</TokenIdentifier>
			<Abstract type="html">Returns the last element of a sequence, or a default value if the sequence contains no elements.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock lastOrNil</Declaration>
			
			<ReturnValue><Abstract type="html">nil if the source sequence is empty; otherwise, the last element in the id&lt;LQEnumerable&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/lastOrNil</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/lastOrNil</TokenIdentifier>
			<Abstract type="html">Returns the last element of a sequence, or a default value if the sequence contains no elements.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultBlock lastOrNil</Declaration>
			
			<ReturnValue><Abstract type="html">nil if the source sequence is empty; otherwise, the last element in the id&lt;LQEnumerable&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/lastOrNil</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setLastOrNilWithPredicate:</TokenIdentifier>
			<Abstract type="html">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock lastOrNilWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">nil if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</Abstract></ReturnValue>
			<Anchor>//api/name/lastOrNilWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/lastOrNilWithPredicate</TokenIdentifier>
			<Abstract type="html">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) ResultWithPredicateBlock lastOrNilWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">nil if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</Abstract></ReturnValue>
			<Anchor>//api/name/lastOrNilWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setLength:</TokenIdentifier>
			<Abstract type="html">Returns the number of elements in a sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQCountBlock length</Declaration>
			
			<ReturnValue><Abstract type="html">The number of elements in the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/length</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/length</TokenIdentifier>
			<Abstract type="html">Returns the number of elements in a sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQCountBlock length</Declaration>
			
			<ReturnValue><Abstract type="html">The number of elements in the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/length</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setLengthWithPredicate:</TokenIdentifier>
			<Abstract type="html">Returns a number that represents how many elements in the specified sequence satisfy a condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQCountWithPredicateBlock lengthWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</Abstract></ReturnValue>
			<Anchor>//api/name/lengthWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/lengthWithPredicate</TokenIdentifier>
			<Abstract type="html">Returns a number that represents how many elements in the specified sequence satisfy a condition.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQCountWithPredicateBlock lengthWithPredicate</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">- A function to test each element for a condition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</Abstract></ReturnValue>
			<Anchor>//api/name/lengthWithPredicate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setOfClass:</TokenIdentifier>
			<Abstract type="html">Filters the elements of an id&lt;LQEnumerable&gt; based on a specified class.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQOfClassBlock ofClass</Declaration>
			
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains elements from the input sequence of given class.</Abstract></ReturnValue>
			<Anchor>//api/name/ofClass</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/ofClass</TokenIdentifier>
			<Abstract type="html">Filters the elements of an id&lt;LQEnumerable&gt; based on a specified class.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQOfClassBlock ofClass</Declaration>
			
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains elements from the input sequence of given class.</Abstract></ReturnValue>
			<Anchor>//api/name/ofClass</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setContains:</TokenIdentifier>
			<Abstract type="html">Determines whether a sequence contains a specified element by using isEqual method to compare values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQPredicate contains</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">- The value to locate in the sequence.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the source sequence contains an element that has the specified value; otherwise, NO.</Abstract></ReturnValue>
			<Anchor>//api/name/contains</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/contains</TokenIdentifier>
			<Abstract type="html">Determines whether a sequence contains a specified element by using isEqual method to compare values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQPredicate contains</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">- The value to locate in the sequence.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the source sequence contains an element that has the specified value; otherwise, NO.</Abstract></ReturnValue>
			<Anchor>//api/name/contains</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setForEach:</TokenIdentifier>
			<Abstract type="html">Enumerates the sequence and invokes the given action for each value in the sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQForEachBlock forEach</Declaration>
			<Parameters>
				<Parameter>
					<Name>actino</Name>
					<Abstract type="html">- Action to invoke for each element.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/forEach</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/forEach</TokenIdentifier>
			<Abstract type="html">Enumerates the sequence and invokes the given action for each value in the sequence.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQForEachBlock forEach</Declaration>
			<Parameters>
				<Parameter>
					<Name>actino</Name>
					<Abstract type="html">- Action to invoke for each element.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/forEach</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setConcat:</TokenIdentifier>
			<Abstract type="html">Concatenates two sequences.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQConcatBlock concat</Declaration>
			<Parameters>
				<Parameter>
					<Name>second</Name>
					<Abstract type="html">- The sequence to concatenate to the first sequence.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the concatenated elements of the two input sequences.</Abstract></ReturnValue>
			<Anchor>//api/name/concat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/concat</TokenIdentifier>
			<Abstract type="html">Concatenates two sequences.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQConcatBlock concat</Declaration>
			<Parameters>
				<Parameter>
					<Name>second</Name>
					<Abstract type="html">- The sequence to concatenate to the first sequence.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the concatenated elements of the two input sequences.</Abstract></ReturnValue>
			<Anchor>//api/name/concat</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setUnions:</TokenIdentifier>
			<Abstract type="html">Produces the set union of two sequences by using isEqual method as comparer</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQConcatBlock unions</Declaration>
			<Parameters>
				<Parameter>
					<Name>second</Name>
					<Abstract type="html">An id&lt;LQEnumerable&gt; whose distinct elements form the second set for the union.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the elements from both input sequences, excluding duplicates.</Abstract></ReturnValue>
			<Anchor>//api/name/unions</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/unions</TokenIdentifier>
			<Abstract type="html">Produces the set union of two sequences by using isEqual method as comparer</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQConcatBlock unions</Declaration>
			<Parameters>
				<Parameter>
					<Name>second</Name>
					<Abstract type="html">An id&lt;LQEnumerable&gt; whose distinct elements form the second set for the union.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains the elements from both input sequences, excluding duplicates.</Abstract></ReturnValue>
			<Anchor>//api/name/unions</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setExcept:</TokenIdentifier>
			<Abstract type="html">Produces the set difference of two sequences by using isEqual method to compare values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQConcatBlock except</Declaration>
			<Parameters>
				<Parameter>
					<Name>An</Name>
					<Abstract type="html">id&lt;LQEnumerable&gt; whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A sequence that contains the set difference of the elements of two sequences.</Abstract></ReturnValue>
			<Anchor>//api/name/except</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/except</TokenIdentifier>
			<Abstract type="html">Produces the set difference of two sequences by using isEqual method to compare values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQConcatBlock except</Declaration>
			<Parameters>
				<Parameter>
					<Name>An</Name>
					<Abstract type="html">id&lt;LQEnumerable&gt; whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A sequence that contains the set difference of the elements of two sequences.</Abstract></ReturnValue>
			<Anchor>//api/name/except</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setIntersect:</TokenIdentifier>
			<Abstract type="html">Produces the set intersection of two sequences by using isEqual method to compare values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQConcatBlock intersect</Declaration>
			<Parameters>
				<Parameter>
					<Name>second</Name>
					<Abstract type="html">- An id&lt;LQEnumerable&gt; whose distinct elements that also appear in the first sequence will be returned.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A sequence that contains the elements that form the set intersection of two sequences.</Abstract></ReturnValue>
			<Anchor>//api/name/intersect</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/intersect</TokenIdentifier>
			<Abstract type="html">Produces the set intersection of two sequences by using isEqual method to compare values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQConcatBlock intersect</Declaration>
			<Parameters>
				<Parameter>
					<Name>second</Name>
					<Abstract type="html">- An id&lt;LQEnumerable&gt; whose distinct elements that also appear in the first sequence will be returned.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A sequence that contains the elements that form the set intersection of two sequences.</Abstract></ReturnValue>
			<Anchor>//api/name/intersect</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setOrderBy:</TokenIdentifier>
			<Abstract type="html">Sorts the elements of a sequence in ascending order by using a specified comparer.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQOrderByBlock orderBy</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">- A function to extract a key from an element.</Abstract>
				</Parameter><Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- A function to compare two values</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; whose elements are sorted according to a key.</Abstract></ReturnValue>
			<Anchor>//api/name/orderBy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/orderBy</TokenIdentifier>
			<Abstract type="html">Sorts the elements of a sequence in ascending order by using a specified comparer.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQOrderByBlock orderBy</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">- A function to extract a key from an element.</Abstract>
				</Parameter><Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- A function to compare two values</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; whose elements are sorted according to a key.</Abstract></ReturnValue>
			<Anchor>//api/name/orderBy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setOrderByDescending:</TokenIdentifier>
			<Abstract type="html">Sorts the elements of a sequence in descending order by using a specified comparer.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQOrderByBlock orderByDescending</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">- A function to extract a key from an element.</Abstract>
				</Parameter><Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- A function to compare two values</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; whose elements are sorted in descending order according to a key.</Abstract></ReturnValue>
			<Anchor>//api/name/orderByDescending</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/orderByDescending</TokenIdentifier>
			<Abstract type="html">Sorts the elements of a sequence in descending order by using a specified comparer.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQOrderByBlock orderByDescending</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">- A function to extract a key from an element.</Abstract>
				</Parameter><Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- A function to compare two values</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; whose elements are sorted in descending order according to a key.</Abstract></ReturnValue>
			<Anchor>//api/name/orderByDescending</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setMin:</TokenIdentifier>
			<Abstract type="html">Returns the minimum value in the enumerable sequence by using the specified comparer to compare values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQMinMaxBlock min</Declaration>
			<Parameters>
				<Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- Comparer used to determine the minimum value</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Minimum value in the sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/min</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/min</TokenIdentifier>
			<Abstract type="html">Returns the minimum value in the enumerable sequence by using the specified comparer to compare values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQMinMaxBlock min</Declaration>
			<Parameters>
				<Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- Comparer used to determine the minimum value</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Minimum value in the sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/min</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setMax:</TokenIdentifier>
			<Abstract type="html">Returns the maxmimum value in the enumerable sequence by using the specified comparer to compare values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQMinMaxBlock max</Declaration>
			<Parameters>
				<Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- Comparer used to determine the maxmimum value</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">MAximum value in the sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/max</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/max</TokenIdentifier>
			<Abstract type="html">Returns the maxmimum value in the enumerable sequence by using the specified comparer to compare values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQMinMaxBlock max</Declaration>
			<Parameters>
				<Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- Comparer used to determine the maxmimum value</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">MAximum value in the sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/max</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setMinBy:</TokenIdentifier>
			<Abstract type="html">Returns the elements with the minimum key value by using the default comparer to compare key values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQMinMaxByBlock minBy</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">- Key selector used to extract the key for each element in the sequence.</Abstract>
				</Parameter><Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- Comparer used to determine the minimum key value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">List with the elements that share the same minimum key value.</Abstract></ReturnValue>
			<Anchor>//api/name/minBy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/minBy</TokenIdentifier>
			<Abstract type="html">Returns the elements with the minimum key value by using the default comparer to compare key values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQMinMaxByBlock minBy</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">- Key selector used to extract the key for each element in the sequence.</Abstract>
				</Parameter><Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- Comparer used to determine the minimum key value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">List with the elements that share the same minimum key value.</Abstract></ReturnValue>
			<Anchor>//api/name/minBy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setMaxBy:</TokenIdentifier>
			<Abstract type="html">Returns the elements with the maxmimum key value by using the default comparer to compare key values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQMinMaxByBlock maxBy</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">- Key selector used to extract the key for each element in the sequence.</Abstract>
				</Parameter><Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- Comparer used to determine the maxmimum key value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">List with the elements that share the same maxmimum key value.</Abstract></ReturnValue>
			<Anchor>//api/name/maxBy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/maxBy</TokenIdentifier>
			<Abstract type="html">Returns the elements with the maxmimum key value by using the default comparer to compare key values.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQMinMaxByBlock maxBy</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">- Key selector used to extract the key for each element in the sequence.</Abstract>
				</Parameter><Parameter>
					<Name>comparer</Name>
					<Abstract type="html">- Comparer used to determine the maxmimum key value.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">List with the elements that share the same maxmimum key value.</Abstract></ReturnValue>
			<Anchor>//api/name/maxBy</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setZip:</TokenIdentifier>
			<Abstract type="html">Applies a specified function to the corresponding elements of two sequences, which produces a sequence of the results.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQZipBlock zip</Declaration>
			<Parameters>
				<Parameter>
					<Name>second</Name>
					<Abstract type="html">- The second sequence to merge.</Abstract>
				</Parameter><Parameter>
					<Name>resultSelector</Name>
					<Abstract type="html">A function that specifies how to merge the elements from the two sequences.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains merged elements of two input sequences.</Abstract></ReturnValue>
			<Anchor>//api/name/zip</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/zip</TokenIdentifier>
			<Abstract type="html">Applies a specified function to the corresponding elements of two sequences, which produces a sequence of the results.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQZipBlock zip</Declaration>
			<Parameters>
				<Parameter>
					<Name>second</Name>
					<Abstract type="html">- The second sequence to merge.</Abstract>
				</Parameter><Parameter>
					<Name>resultSelector</Name>
					<Abstract type="html">A function that specifies how to merge the elements from the two sequences.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that contains merged elements of two input sequences.</Abstract></ReturnValue>
			<Anchor>//api/name/zip</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setJoin:</TokenIdentifier>
			<Abstract type="html">Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQJoinBlock join</Declaration>
			<Parameters>
				<Parameter>
					<Name>inner</Name>
					<Abstract type="html">The sequence to join to the self sequence.</Abstract>
				</Parameter><Parameter>
					<Name>outerKeySelector</Name>
					<Abstract type="html">A function to extract the join key from each element of the self sequence.</Abstract>
				</Parameter><Parameter>
					<Name>inerKeySelector</Name>
					<Abstract type="html">A function to extract the join key from each element of the second sequence.</Abstract>
				</Parameter><Parameter>
					<Name>resultSelector</Name>
					<Abstract type="html">A function to create a result element from two matching elements.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that has elements that are obtained by performing an inner join on two sequences.

Example:
    @interface Person
    @property NSString* name;
    +(id)makeWithName:(NSString*)name;
    @end

    @interface Pet
    @property NSString* name;
    @property Person* owner;
    +(id)makeWithName:(NSString)name andOwner:(Person)owner;
    @end
    
    Person* magnus = [Person makeWithName:@&quot;Hedlund, Magnus&quot;];
    Person* terry = [Person makeWithName:@&quot;Adams, Terry&quot;];
    Person* charlotte = [Person makeWithName:@&quot;Weiss, Charlotte&quot;];

    Pet* barley = [Pet  makeWithName:@&quot;Barley&quot; andOwner:terry];
    Pet* boots = [Pet  makeWithName:@&quot;Boots&quot; andOwner:terry];
    Pet* whiskers = [Pet  makeWithName:@&quot;Whiskers&quot; andOwner:charlotte];
    Pet* daisy = [Pet  makeWithName:@&quot;Daisy&quot; andOwner:magnus];
    
    NSArray* people = @[ magnus, terry, charlotte ];
    NSArray* pets = @[ barley, boots, whiskers, daisy ];

    // Create a list of Person-Pet pairs where
    // each element is a NSDictionary type that contains a
    // Pet&apos;s name and the name of the Person that owns the Pet.
    id&lt;LQEnumerable&gt; query =
        people.Join(pets,
            ^id(Person* person) { return person; },
            ^id(Pet* pet) { return pet.owner; },
            ^id(Person person, Pet pet) { return @{@&quot;OwnerName&quot;: person.name, @&quot;Pet&quot;: pet.name}; }
        );

    for(NSDictionary* obj in query) {
        NSLog(@&quot;%@ - %@&quot;, obj[@&quot;OwnerName&quot;], obj[@&quot;Pet&quot;]);
    }
    
    
    This code produces the following output:

    Hedlund, Magnus - Daisy
    Adams, Terry - Barley
    Adams, Terry - Boots
    Weiss, Charlotte - Whiskers</Abstract></ReturnValue>
			<Anchor>//api/name/join</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/join</TokenIdentifier>
			<Abstract type="html">Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQJoinBlock join</Declaration>
			<Parameters>
				<Parameter>
					<Name>inner</Name>
					<Abstract type="html">The sequence to join to the self sequence.</Abstract>
				</Parameter><Parameter>
					<Name>outerKeySelector</Name>
					<Abstract type="html">A function to extract the join key from each element of the self sequence.</Abstract>
				</Parameter><Parameter>
					<Name>inerKeySelector</Name>
					<Abstract type="html">A function to extract the join key from each element of the second sequence.</Abstract>
				</Parameter><Parameter>
					<Name>resultSelector</Name>
					<Abstract type="html">A function to create a result element from two matching elements.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that has elements that are obtained by performing an inner join on two sequences.

Example:
    @interface Person
    @property NSString* name;
    +(id)makeWithName:(NSString*)name;
    @end

    @interface Pet
    @property NSString* name;
    @property Person* owner;
    +(id)makeWithName:(NSString)name andOwner:(Person)owner;
    @end
    
    Person* magnus = [Person makeWithName:@&quot;Hedlund, Magnus&quot;];
    Person* terry = [Person makeWithName:@&quot;Adams, Terry&quot;];
    Person* charlotte = [Person makeWithName:@&quot;Weiss, Charlotte&quot;];

    Pet* barley = [Pet  makeWithName:@&quot;Barley&quot; andOwner:terry];
    Pet* boots = [Pet  makeWithName:@&quot;Boots&quot; andOwner:terry];
    Pet* whiskers = [Pet  makeWithName:@&quot;Whiskers&quot; andOwner:charlotte];
    Pet* daisy = [Pet  makeWithName:@&quot;Daisy&quot; andOwner:magnus];
    
    NSArray* people = @[ magnus, terry, charlotte ];
    NSArray* pets = @[ barley, boots, whiskers, daisy ];

    // Create a list of Person-Pet pairs where
    // each element is a NSDictionary type that contains a
    // Pet&apos;s name and the name of the Person that owns the Pet.
    id&lt;LQEnumerable&gt; query =
        people.Join(pets,
            ^id(Person* person) { return person; },
            ^id(Pet* pet) { return pet.owner; },
            ^id(Person person, Pet pet) { return @{@&quot;OwnerName&quot;: person.name, @&quot;Pet&quot;: pet.name}; }
        );

    for(NSDictionary* obj in query) {
        NSLog(@&quot;%@ - %@&quot;, obj[@&quot;OwnerName&quot;], obj[@&quot;Pet&quot;]);
    }
    
    
    This code produces the following output:

    Hedlund, Magnus - Daisy
    Adams, Terry - Barley
    Adams, Terry - Boots
    Weiss, Charlotte - Whiskers</Abstract></ReturnValue>
			<Anchor>//api/name/join</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setJoinWithComparator:</TokenIdentifier>
			<Abstract type="html">Correlates the elements of two sequences based on matching keys. A specified NSComparator is used to compare keys.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQJoinWithComparatorBlock joinWithComparator</Declaration>
			<Parameters>
				<Parameter>
					<Name>inner</Name>
					<Abstract type="html">The sequence to join to the self sequence.</Abstract>
				</Parameter><Parameter>
					<Name>outerKeySelector</Name>
					<Abstract type="html">A function to extract the join key from each element of the self sequence.</Abstract>
				</Parameter><Parameter>
					<Name>inerKeySelector</Name>
					<Abstract type="html">A function to extract the join key from each element of the second sequence.</Abstract>
				</Parameter><Parameter>
					<Name>resultSelector</Name>
					<Abstract type="html">A function to create a result element from two matching elements.</Abstract>
				</Parameter><Parameter>
					<Name>comparator</Name>
					<Abstract type="html">An LQEqualityComparer to compare keys.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that has elements that are obtained by performing an inner join on two sequences.</Abstract></ReturnValue>
			<Anchor>//api/name/joinWithComparator</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/joinWithComparator</TokenIdentifier>
			<Abstract type="html">Correlates the elements of two sequences based on matching keys. A specified NSComparator is used to compare keys.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQJoinWithComparatorBlock joinWithComparator</Declaration>
			<Parameters>
				<Parameter>
					<Name>inner</Name>
					<Abstract type="html">The sequence to join to the self sequence.</Abstract>
				</Parameter><Parameter>
					<Name>outerKeySelector</Name>
					<Abstract type="html">A function to extract the join key from each element of the self sequence.</Abstract>
				</Parameter><Parameter>
					<Name>inerKeySelector</Name>
					<Abstract type="html">A function to extract the join key from each element of the second sequence.</Abstract>
				</Parameter><Parameter>
					<Name>resultSelector</Name>
					<Abstract type="html">A function to create a result element from two matching elements.</Abstract>
				</Parameter><Parameter>
					<Name>comparator</Name>
					<Abstract type="html">An LQEqualityComparer to compare keys.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An id&lt;LQEnumerable&gt; that has elements that are obtained by performing an inner join on two sequences.</Abstract></ReturnValue>
			<Anchor>//api/name/joinWithComparator</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setToLookup:</TokenIdentifier>
			<Abstract type="html">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQLookupBlock toLookup</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">A function to extract the key from each element of the sequence.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A NSDictionary that maps key to id&lt;LQEnumerable&gt; of elements.</Abstract></ReturnValue>
			<Anchor>//api/name/toLookup</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/toLookup</TokenIdentifier>
			<Abstract type="html">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQLookupBlock toLookup</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">A function to extract the key from each element of the sequence.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A NSDictionary that maps key to id&lt;LQEnumerable&gt; of elements.</Abstract></ReturnValue>
			<Anchor>//api/name/toLookup</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setToArray:</TokenIdentifier>
			<Abstract type="html">Creates a NSArray from a id&lt;LQEnumerable&gt;.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQArrayBlock toArray</Declaration>
			
			<ReturnValue><Abstract type="html">An array that contains the elements from the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/toArray</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/toArray</TokenIdentifier>
			<Abstract type="html">Creates a NSArray from a id&lt;LQEnumerable&gt;.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQArrayBlock toArray</Declaration>
			
			<ReturnValue><Abstract type="html">An array that contains the elements from the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/toArray</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setToDictionary:</TokenIdentifier>
			<Abstract type="html">Creates a NSDictionary from an id&lt;LQEnumerable&gt; according to specified key selector and element selector functions.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQDictionaryBlock toDictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">- A function to extract a key from each element.</Abstract>
				</Parameter><Parameter>
					<Name>valueSelector</Name>
					<Abstract type="html">- A transform function to produce a result element value from each element.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A NSDictionary that contains values selected from the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/toDictionary</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/toDictionary</TokenIdentifier>
			<Abstract type="html">Creates a NSDictionary from an id&lt;LQEnumerable&gt; according to specified key selector and element selector functions.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQDictionaryBlock toDictionary</Declaration>
			<Parameters>
				<Parameter>
					<Name>keySelector</Name>
					<Abstract type="html">- A function to extract a key from each element.</Abstract>
				</Parameter><Parameter>
					<Name>valueSelector</Name>
					<Abstract type="html">- A transform function to produce a result element value from each element.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A NSDictionary that contains values selected from the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/toDictionary</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/LQEnumerable/setToSet:</TokenIdentifier>
			<Abstract type="html">Creates a NSSet from a id&lt;LQEnumerable&gt;.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSetBlock toSet</Declaration>
			
			<ReturnValue><Abstract type="html">A set that contains the elements from the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/toSet</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/LQEnumerable/toSet</TokenIdentifier>
			<Abstract type="html">Creates a NSSet from a id&lt;LQEnumerable&gt;.</Abstract>
			<DeclaredIn>LQEnumerable.h</DeclaredIn>			
			
			<Declaration>@property (readonly, nonatomic) LQSetBlock toSet</Declaration>
			
			<ReturnValue><Abstract type="html">A set that contains the elements from the input sequence.</Abstract></ReturnValue>
			<Anchor>//api/name/toSet</Anchor>
		</Token>
		
	</File>
</Tokens>